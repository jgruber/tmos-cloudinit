#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
This module enables the TMOS mgmt interface to be provisioned
statically through cloudinit userdata.

The module must be enabled in the userdata YAML to perform any
onboarding artifact generation or onboarding.

# cloud-config
tmos_static_mgmt:
  enabled: True
  ip: 192.168.245.100/24
  gw: 192.168.245.1
  mtu: 1450

"""
import os
import sys
import logging
import subprocess
import time

from cloudinit import util
from cloudinit import tmos_onboard_utils

MODULE_NAME = 'tmos_static_mgmt'

OUT_DIR = '/var/lib/cloud/' + MODULE_NAME
EXEC_DIR = '/opt/cloud/' + MODULE_NAME

ONBOARD_COMPLETE_FLAG_FILE = OUT_DIR + '/ONBOARD_COMPLETE'

LOG_FILE = '/var/log/f5-cloudinit.log'

TMSH_CMD_FILE_DIR = EXEC_DIR + '/initscripts'

ONBOARD_TIMEOUT = 120

ERROR = 'ERROR'
SUCCESS = 'SUCCESS'

DEFAULT_TIMEZONE = 'UTC'

tmos_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def tmsh_cmd_dir_exists():
    """Ensures TMSH generated init script directory exists"""
    if not os.path.isdir(TMSH_CMD_FILE_DIR):
        os.makedirs(TMSH_CMD_FILE_DIR)
    if not os.path.isdir(OUT_DIR):
        os.makedirs(OUT_DIR)


def create_onboard_artifacts(mgmt_cidr, mgmt_gw, mgmt_mtu, hostname, nameservers,
                             searchdomain, ntpservers, post_onboard_commands):
    """Generates all needed onboarding artifacts from metadata"""
    tmsh_cmd_dir_exists()
    network_onboard_script = TMSH_CMD_FILE_DIR + '/001_mgmt_setup.sh'
    if os.path.isfile(network_onboard_script):
        util.del_file(network_onboard_script)
    with open(network_onboard_script, 'w') as mgmt_script:
        mgmt_script.write("#!/bin/bash\n")
        mgmt_script.write("echo 'starting static mgmt network provisioning'\n")
        mgmt_script.write(
            "tmsh modify sys global-settings mgmt-dhcp disabled\n")
        onenic = tmos_onboard_utils.is_onenic()
        if onenic:
            mgmt_script.write("echo '1 NIC deployment discovered'\n")
            mgmt_script.write(
                "tmsh modify sys db provision.1nicautoconfig value disable\n")
            mgmt_script.write(
                "tmsh modify sys db provision.1nic value forced_enable\n")
            mgmt_script.write("tmsh modify sys httpd ssl-port 8443\n")
            mgmt_script.write(
                "tmsh modify net self-allow defaults add { tcp:8443 }\n")
            mgmt_script.write("sleep 5\n")
            mgmt_script.write("tmsh create sys management-ip %s\n" % mgmt_cidr)
            mgmt_script.write(
                "tmsh modify sys management-ip %s description 'provisioned by %s'\n" % (mgmt_cidr, MODULE_NAME))
            if mgmt_mtu:
                mgmt_script.write(
                    "tmsh create net vlan internal { interfaces replace-all-with { 1.0 { } } tag 4094 mtu %s }\n" % mgmt_mtu)
            else:
                mgmt_script.write(
                    "tmsh create net vlan internal { interfaces replace-all-with { 1.0 { } } tag 4094 }\n")
            mgmt_script.write(
                "tmsh create net self self_1nic { address %s allow-service default vlan internal }\n" % mgmt_cidr)
            if mgmt_gw:
                mgmt_script.write(
                    "tmsh create sys management-route default gateway %s\n" % mgmt_gw)
                mgmt_script.write(
                    "tmsh create net route default network default gw %s\n" % mgmt_gw)
        else:
            mgmt_script.write("sleep 5\n")
            mgmt_script.write("tmsh create sys management-ip %s\n" % mgmt_cidr)
            mgmt_script.write(
                "tmsh modify sys management-ip %s description 'provisioned by %s'\n" % (mgmt_cidr, MODULE_NAME))
            if mgmt_gw:
                mgmt_script.write(
                    "tmsh create sys management-route default gateway %s\n" % mgmt_gw)
            if mgmt_mtu:
                mgmt_script.write("ip link set mgmt mtu %s\n" % mgmt_mtu)
                mgmt_script.write(
                    "echo 'ip link set mgmt mtu %s' > /config/startup\n" % mgmt_mtu)

        if hostname:
            mgmt_script.write(
                "tmsh modify sys global-settings hostname %s\n" % hostname)
            mgmt_script.write(
                "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { host-name }\n")
        if nameservers:
            mgmt_script.write(
                "tmsh modify sys dns name-servers replace-all-with { %s }\n" % " ".join(nameservers))
            mgmt_script.write(
                "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { domain-name-servers }\n")
        if searchdomain:
            mgmt_script.write(
                "tmsh modify sys dns search replace-all-with { %s }\n" % searchdomain)
            mgmt_script.write(
                "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { domain-name }\n")
        if ntpservers:
            mgmt_script.write(
                "tmsh modify sys ntp servers replace-all-with { %s }\n" % " ".join(ntpservers))
            mgmt_script.write(
                "tmsh modify sys ntp timezone %s\n" % DEFAULT_TIMEZONE)
            mgmt_script.write(
                "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }\n")
        mgmt_script.write("echo 'mgmt interface configured: %s'\n" % mgmt_cidr)
        mgmt_script.write("tmsh save sys config base\n")

    if post_onboard_commands:
        post_onboard_commands_script = TMSH_CMD_FILE_DIR + '/002_post_onboard_commands.sh'
        if os.path.isfile(post_onboard_commands_script):
            util.del_file(post_onboard_commands_script)
        with open(post_onboard_commands_script, 'w') as pob_script:
            pob_script.write("#!/bin/bash\n")
            pob_script.write(
                "echo 'starting post onboarding commands provisioning'\n")
            pob_script.write("cmds=(\n")
            for cmd in post_onboard_commands:
                pob_script.write("\"%s\"\n" % cmd.replace('"', r'\"'))
            pob_script.write(")\n\n")
            pob_script.write("for (( i = 0; i < ${#cmds[@]} ; i++ )); do\n")
            pob_script.write("    echo \"Running: ${cmds[$i]}\"\n")
            pob_script.write("    eval \"${cmds[$i]}\"\n")
            pob_script.write("    if [ $? -eq 1 ]; then\n")
            pob_script.write(
                "        echo \"Command: ${cmds[$i]} Failed. Stopping execution of any further commands.\"\n")
            pob_script.write("        exit 1\n")
            pob_script.write("    fi\n")
            pob_script.write("done\n\n")


def onboard(trusted_sources, icontrollx_package_urls, phone_home_url, phone_home_url_verify_tls, phone_home_cli):
    """Implements the onboarding business logic"""
    onboard_script = TMSH_CMD_FILE_DIR + '/onboard.sh'
    if os.path.isfile(onboard_script):
        util.del_file(onboard_script)
    script_files = os.listdir(TMSH_CMD_FILE_DIR)
    script_files.sort()
    with open(onboard_script, 'w') as obs:
        obs.write("#!/bin/bash\n\n")
        obs.write("function check_mcpd_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write(
            "        if tmsh -a show sys mcp-state field-fmt 2> /dev/null | grep -q running; then\n")
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        echo 'waiting for mcpd to reach running state'\n")
        obs.write("        let checks=checks+1\n")
        obs.write("        sleep 10\n")
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function exec_phases() {\n")
        for script_file in script_files:
            obs.write("    /bin/bash %s/%s\n" %
                      (TMSH_CMD_FILE_DIR, script_file))
        obs.write("}\n\n")
        obs.write("check_mcpd_up\n")
        obs.write("exec_phases\n")
        obs.write("echo 1 > " + ONBOARD_COMPLETE_FLAG_FILE + '\n')
    os.chmod(onboard_script, 0775)
    with open(LOG_FILE, 'a+') as onboardlog:
        subprocess.call(['nohup', 'sh', '-c', onboard_script,
                         '&'], stdout=onboardlog, stderr=onboardlog)
    end_time = time.time() + ONBOARD_TIMEOUT
    while (end_time - time.time()) > 0:
        if not os.path.exists(ONBOARD_COMPLETE_FLAG_FILE):
            time.sleep(1)
        else:
            for ext_url in icontrollx_package_urls:
                LOG.info('downloading: %s', ext_url)
                if tmos_onboard_utils.download_extension(ext_url):
                    LOG.info(
                        'extension %s downloaded in discovered iControl extensions', ext_url)
                else:
                    LOG.error('extension %s could not be downloaded', ext_url)
            end_time = 0
            tmos_onboard_utils.install_extensions(trusted_sources)
    onboard_status = 'SUCCESS'

    if not os.path.exists(ONBOARD_COMPLETE_FLAG_FILE):
        LOG.error('Onboarding scripts failed to complete...exiting')
        onboard_status = ERROR

    if phone_home_url:
        tmos_onboard_utils.phone_home(
            phone_home_url, False, False, onboard_status, phone_home_url_verify_tls)

    if phone_home_cli and onboard_status == SUCCESS:
        tmos_onboard_utils.run_cmd(phone_home_cli)

    LOG.info('onboarding ended with status: %s', onboard_status)


def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    tag = MODULE_NAME
    enabled = False
    if tag in cloud_config:
        try:
            enabled = bool(cloud_config[tag]['enabled'])
        except Exception:
            LOG.error("%s missing enabled attribute", tag)
            return
    if enabled:
        mgmt_ip = None
        if 'ip' in cloud_config[tag]:
            mgmt_ip = cloud_config[tag]['ip']
        if not mgmt_ip:
            LOG.error("%s missing ip attribute", tag)
            return
        mgmt_netmask = None
        if 'netmask' in cloud_config[tag]:
            mgmt_netmask = cloud_config[tag]['netmask']
        mgmt_gw = None
        if 'gw' in cloud_config[tag]:
            mgmt_gw = cloud_config[tag]['gw']
        mgmt_mtu = 1500
        if 'mtu' in cloud_config[tag]:
            mgmt_mtu = cloud_config[tag]['mtu']
        hostname = None
        if 'hostname' in cloud_config[tag]:
            hostname = cloud_config[tag]['hostname']
        nameservers = []
        if 'nameservers' in cloud_config[tag]:
            nameservers = cloud_config[tag]['nameservers']
        searchdomain = None
        if 'searchdomain' in cloud_config[tag]:
            searchdomain = cloud_config[tag]['searchdomain']
        ntpservers = []
        if 'ntpservers' in cloud_config[tag]:
            ntpservers = cloud_config[tag]['ntpservers']
        post_onboard_enabled = False
        if 'post_onboard_enabled' in cloud_config[tag]:
            post_onboard_enabled = bool(
                cloud_config[tag]['post_onboard_enabled'])
        post_onboard_commands = []
        if 'post_onboard_commands' in cloud_config[tag] and post_onboard_enabled:
            post_onboard_commands = cloud_config[tag]['post_onboard_commands']
        mgmt_cidr = mgmt_ip
        if mgmt_ip.find('/') < 0:
            if not mgmt_netmask:
                LOG.error(
                    "%s ip is not in CIDR format and no netmask supplied", tag)
                return
            if tmos_onboard_utils.is_v4(mgmt_ip):
                mgmt_nm = tmos_onboard_utils.ipv4_cidr_from_netmask(
                    mgmt_netmask)
                mgmt_cidr = "%s/%s" % (mgmt_ip, mgmt_nm)
            else:
                mgmt_cidr = "%s/64" % mgmt_ip
        keys = []
        if "ssh_authorized_keys" in cloud_config:
            cfgkeys = cloud_config["ssh_authorized_keys"]
            keys.extend(cfgkeys)
            LOG.info('%s found ssh_authorized_keys', tag)
        tmos_onboard_utils.inject_public_ssh_keys(keys)
        # download referenced extensions
        icontrollx_trusted_sources = True
        if 'icontrollx_trusted_sources' in cloud_config[tag]:
            icontrollx_trusted_sources = cloud_config[tag]['icontrollx_trusted_sources']
        icontrollx_package_urls = []
        if 'icontrollx_package_urls' in cloud_config[tag]:
            icontrollx_package_urls = cloud_config[tag]['icontrollx_package_urls']
            LOG.info('%s found icontrollx_package_urls', tag)
        create_onboard_artifacts(mgmt_cidr, mgmt_gw, mgmt_mtu, hostname, nameservers,
                                 searchdomain, ntpservers, post_onboard_commands)
        phone_home_url = None
        if 'phone_home_url' in cloud_config[tag]:
            phone_home_url = cloud_config[tag]['phone_home_url']

        phone_home_url_verify_tls = True
        if 'phone_home_url_verify_tls' in cloud_config[tag]:
            phone_home_url_verify_tls = cloud_config[tag]['phone_home_url_verify_tls']

        phone_home_cli = None
        if 'phone_home_cli' in cloud_config[tag]:
            phone_home_cli = cloud_config[tag]['phone_home_cli']

        try:
            onboard(icontrollx_trusted_sources, icontrollx_package_urls,
                    phone_home_url, phone_home_url_verify_tls, phone_home_cli)
        except Exception as err:
            LOG.error('onboard exception - %s', err)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {
        MODULE_NAME: {
            'enabled': True,
            'ip': sys.argv[1],
            'gw': sys.argv[2],
            'mtu': sys.argv[3]
        }
    }
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    handle(MODULE_NAME, CLOUD_CONFIG, None, logging, [])
